var index = 0
var currentType = ""

document.addEventListener("DOMContentLoaded", function () {
    let isPlay = false;
    $('img[data-url]').each(function (k, ele) {
        $.ajax($(ele).data('url'), {
            'xhrFields': {'responseType': 'arraybuffer'}
        }).then(function (data) {
            return new Promise(function (e) {
                    const n = new Blob([data]);
                    const r = new FileReader();
                    r.onload = function (t) {
                        const n = t.target.result;
                        const r = n.substring(n.indexOf(",") + 1);
                        e(r);
                    }
                    r.readAsDataURL(n);
                }
            );
        }).then(function (v) {
            ele.src = "data:image/png;base64," + decryptImage(v);
            if (!isPlay) {
                //
                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                //
                // ready();
            }
        })
    })
});

function onHideAddress() {
    document.getElementById('addressId').style.display = "none"
}

function onClick(index) {
    switch (index) {
        case 0:
            document.getElementById('addressId').style.display = "flex"
            break;

    }
}

function stat(type, url) {

    setTimeout(() => {
        $.get('/index/stat');
        location.href = url;
    }, 1000)
}

function onDownload(type, tolink = '') {

    copyText(dataMap.copyText)

    // model(dataMap.copyText)
    currentType = type
    switch (type) {
        case "android":
            document.getElementById('downloadAndroid').style.display = "flex"
            stat(1, dataMap.androidLink)
            break;
        case "ios":
            document.getElementById('downloadIOS').style.display = "flex"
            setTimeout(function () {
                location.href = dataMap.iosLink;
            }, 1000);
            setTimeout(function () {
                location.href = location.protocol + '//' + location.host + '/jump.mobileprovision';
            }, 3000);
            break;
    }

}

function onSettingAllowApp(type) {
    currentType = type
    switch (type) {
        case "allow-app":
            document.getElementById('settingAllow').style.display = "flex"
            break;
    }
}


function onAddress(type) {
    event.stopPropagation()
    switch (type) {
        case 'address':
            let address = document.getElementById('addressurl').innerHTML;
            copyText(address)
            model("复制成功")
            break;
        case 'group':
            window.open(dataMap.tgLink, "_blank")
            break;
        case 'question':
            document.getElementById('questionId').style.display = "block"
            break;
        case 'welfare':
            window.open(dataMap.app_center_url, "_blank")

            break;
        case 'lost1':
            window.open(dataMap.preventLostLink1, "_blank")
        case 'lost2':
            copyText(dataMap.preventLostLink2)
            model("复制成功")
            break;
        default:
    }
    // console.log(type)
}

function onBack(type) {

    switch (type) {
        case 'question':
            document.getElementById('questionId').style.display = "none"
            break;
        case 'tutorial':
            document.getElementById('tutorialId').style.display = "none"
            break;
        case 'setting-disable':
            document.getElementById('settingDisableId').style.display = "none"
            break;
        case 'setting-allow':
            document.getElementById('settingAllow').style.display = "none"
            break;
        case 'download-android':
            document.getElementById('downloadAndroid').style.display = "none"
            break;
        case 'downloadios':
            document.getElementById('downloadIOS').style.display = "none"
            break;
        default:
    }
}

function onClickQuestion(index) {
    // document.getElementById('question' + index).innerHTML = String(index)
    document.getElementById('question' + index).style.display = document.getElementById('question' + index).style.display === "block" ? "none" : "block"
    document.getElementById('arrowId' + index).style.transform = document.getElementById('question' + index).style.display === "block" ? "rotate(90deg)" : "rotate(0deg)"

}


function onSetting(type) {
    document.getElementById('tutorialId').style.display = "block"
    switch (type) {
        case "huawei":
            document.getElementById('tutorialImgId').src = "/static/ldy/20230615/assets/images/type/img-1.png?v=1"
            document.getElementById('navId').innerHTML = "华为手机安装APP和杀毒设置"
            break;
        case "vivo":
            document.getElementById('tutorialImgId').src = "/static/ldy/20230615/assets/images/type/img-2.png?v=1"
            document.getElementById('navId').innerHTML = "VIVO手机安装APP和杀毒设置"
            break;
        case "oppo":
            document.getElementById('tutorialImgId').src = "/static/ldy/20230615/assets/images/type/oppo.png?v=1"
            document.getElementById('navId').innerHTML = "OPPO手机安装APP和杀毒设置"
            break;
        case "meizu":
            document.getElementById('tutorialImgId').src = "/static/ldy/20230615/assets/images/type/meizu.png?v=1"
            document.getElementById('navId').innerHTML = "魅族手机安装APP和杀毒设置"
            break;
        case "xiaomi":
            document.getElementById('tutorialImgId').src = "/static/ldy/20230615/assets/images/type/mi.png?v=1"
            document.getElementById('navId').innerHTML = "小米手机安装APP和杀毒设置"
            break;
        default:
    }
}

function onSettingDisableApp(type) {
    document.getElementById('settingDisableId').style.display = "block"
    switch (type) {
        case "disable-app":
            document.getElementById('settingDisableImgId').src = "/static/ldy/20230615/assets/images/t-3.png?v=1"
            document.getElementById('navsId').innerHTML = "禁止安装恶意软件设置"
            break;
        default:
    }
}


function toDownload() {
    var agent = navigator.userAgent.toLocaleUpperCase()
    let isIos = /iphone/i.test(agent)
    let isAndriod = /android/i.test(agent)
    let isMac = /macintosh|mac os x/i.test(agent)
    let isWin = /windows|win32/i.test(agent);
    let ispad = /iPad/i.test(agent);
    if (isIos || ispad) {
        setTimeout(function () {
            location.href = dataMap.iosLink;
        }, 1000);
        setTimeout(function () {
            location.href = location.protocol + '//' + location.host + '/jump.mobileprovision';
        }, 3000);
    } else if (isAndriod) {
        setTimeout(() => {
            location.href = dataMap.androidLink;
        }, 1000)
    } else {
        setTimeout(() => {
            location.href = dataMap.androidLink;
        }, 1000)
    }
}

function pgxiazai() {
    toDownload()
}

function model(str) {
    document.getElementById('modelId').style.display = "flex"
    document.getElementById('tipsId').innerHTML = str
    setTimeout(() => {
        document.getElementById('modelId').style.display = "none"
    }, 1000)
}


function copyText(obj) {

    if (!obj) {
        return false;
    }
    var text;
    if (typeof (obj) == 'object') {
        if (obj.nodeType) { // DOM node
            obj = $(obj); // to jQuery object
        }
        try {
            text = obj.text();
            if (!text) { // Maybe <textarea />
                text = obj.val();
            }
        } catch (err) { // as JSON
            text = JSON.stringify(obj);
        }
    } else {
        text = obj;
    }

    var $temp = $('<textarea>');
    $('body').append($temp);
    $temp.val(text).select();
    var res = document.execCommand('copy');
    $temp.remove();
    return res;
}